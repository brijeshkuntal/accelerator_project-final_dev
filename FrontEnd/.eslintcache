[{"C:\\brijesh\\accelerator_project-final_dev\\FrontEnd\\src\\index.tsx":"1","C:\\brijesh\\accelerator_project-final_dev\\FrontEnd\\src\\app\\stores\\store.ts":"2","C:\\brijesh\\accelerator_project-final_dev\\FrontEnd\\src\\app\\layout\\App.tsx":"3","C:\\brijesh\\accelerator_project-final_dev\\FrontEnd\\src\\app\\stores\\modalStore.ts":"4","C:\\brijesh\\accelerator_project-final_dev\\FrontEnd\\src\\app\\stores\\userStore.ts":"5","C:\\brijesh\\accelerator_project-final_dev\\FrontEnd\\src\\app\\stores\\commonStore.ts":"6","C:\\brijesh\\accelerator_project-final_dev\\FrontEnd\\src\\app\\stores\\employeeStore.ts":"7","C:\\brijesh\\accelerator_project-final_dev\\FrontEnd\\src\\app\\layout\\NavBar.tsx":"8","C:\\brijesh\\accelerator_project-final_dev\\FrontEnd\\src\\app\\layout\\LoadingComponent.tsx":"9","C:\\brijesh\\accelerator_project-final_dev\\FrontEnd\\src\\features\\errors\\NotFound.tsx":"10","C:\\brijesh\\accelerator_project-final_dev\\FrontEnd\\src\\features\\users\\LoginForm.tsx":"11","C:\\brijesh\\accelerator_project-final_dev\\FrontEnd\\src\\features\\employees\\dashboard\\EmpDashboard.tsx":"12","C:\\brijesh\\accelerator_project-final_dev\\FrontEnd\\src\\features\\home\\HomePage.tsx":"13","C:\\brijesh\\accelerator_project-final_dev\\FrontEnd\\src\\features\\employees\\dashboard\\EmployeeDragAndDrop.tsx":"14","C:\\brijesh\\accelerator_project-final_dev\\FrontEnd\\src\\features\\employees\\form\\EmpForm.tsx":"15","C:\\brijesh\\accelerator_project-final_dev\\FrontEnd\\src\\features\\employees\\details\\EmpDelete.tsx":"16","C:\\brijesh\\accelerator_project-final_dev\\FrontEnd\\src\\app\\common\\modals\\ModalContainer.tsx":"17","C:\\brijesh\\accelerator_project-final_dev\\FrontEnd\\src\\features\\employees\\details\\EmpDetails.tsx":"18","C:\\brijesh\\accelerator_project-final_dev\\FrontEnd\\src\\app\\api\\agent.ts":"19","C:\\brijesh\\accelerator_project-final_dev\\FrontEnd\\src\\app\\common\\query\\query.ts":"20","C:\\brijesh\\accelerator_project-final_dev\\FrontEnd\\src\\app\\common\\options\\categoryOptions.ts":"21","C:\\brijesh\\accelerator_project-final_dev\\FrontEnd\\src\\features\\employees\\dashboard\\EmpList.tsx":"22","C:\\brijesh\\accelerator_project-final_dev\\FrontEnd\\src\\features\\users\\RegisterForm.tsx":"23","C:\\brijesh\\accelerator_project-final_dev\\FrontEnd\\src\\features\\employees\\details\\EmpDetailedInfo.tsx":"24","C:\\brijesh\\accelerator_project-final_dev\\FrontEnd\\src\\features\\employees\\details\\EmpDetailedHeader.tsx":"25","C:\\brijesh\\accelerator_project-final_dev\\FrontEnd\\src\\app\\common\\form\\MyTextInput.tsx":"26","C:\\brijesh\\accelerator_project-final_dev\\FrontEnd\\src\\app\\common\\form\\MyTextArea.tsx":"27","C:\\brijesh\\accelerator_project-final_dev\\FrontEnd\\src\\app\\common\\form\\MySelectInput.tsx":"28","C:\\brijesh\\accelerator_project-final_dev\\FrontEnd\\src\\app\\common\\form\\MyDateInput.tsx":"29","C:\\brijesh\\accelerator_project-final_dev\\FrontEnd\\src\\features\\employees\\dashboard\\EmpListItem.tsx":"30","C:\\brijesh\\accelerator_project-final_dev\\FrontEnd\\src\\features\\errors\\ValidationErrors.tsx":"31","C:\\brijesh\\accelerator_project-final_dev\\FrontEnd\\src\\features\\employees\\dashboard\\EmployeeDragDrop.tsx":"32"},{"size":718,"mtime":1651830909003,"results":"33","hashOfConfig":"34"},{"size":635,"mtime":1651830909654,"results":"35","hashOfConfig":"34"},{"size":2405,"mtime":1654153167989,"results":"36","hashOfConfig":"34"},{"size":490,"mtime":1651830909627,"results":"37","hashOfConfig":"34"},{"size":4135,"mtime":1653567004191,"results":"38","hashOfConfig":"34"},{"size":1333,"mtime":1651830909567,"results":"39","hashOfConfig":"34"},{"size":6689,"mtime":1651830909596,"results":"40","hashOfConfig":"34"},{"size":1207,"mtime":1651830909426,"results":"41","hashOfConfig":"34"},{"size":370,"mtime":1651830909403,"results":"42","hashOfConfig":"34"},{"size":588,"mtime":1651830910002,"results":"43","hashOfConfig":"34"},{"size":1614,"mtime":1651830910100,"results":"44","hashOfConfig":"34"},{"size":1282,"mtime":1651830909723,"results":"45","hashOfConfig":"34"},{"size":1534,"mtime":1651830910062,"results":"46","hashOfConfig":"34"},{"size":5671,"mtime":1653375084232,"results":"47","hashOfConfig":"34"},{"size":4071,"mtime":1651830909972,"results":"48","hashOfConfig":"34"},{"size":928,"mtime":1651830909849,"results":"49","hashOfConfig":"34"},{"size":476,"mtime":1651830909292,"results":"50","hashOfConfig":"34"},{"size":1184,"mtime":1651830909936,"results":"51","hashOfConfig":"34"},{"size":2110,"mtime":1653567076289,"results":"52","hashOfConfig":"34"},{"size":3192,"mtime":1651830909343,"results":"53","hashOfConfig":"34"},{"size":222,"mtime":1651830909318,"results":"54","hashOfConfig":"34"},{"size":803,"mtime":1651830909753,"results":"55","hashOfConfig":"34"},{"size":2454,"mtime":1651830910151,"results":"56","hashOfConfig":"34"},{"size":1995,"mtime":1651830909910,"results":"57","hashOfConfig":"34"},{"size":2014,"mtime":1651830909882,"results":"58","hashOfConfig":"34"},{"size":629,"mtime":1651830909260,"results":"59","hashOfConfig":"34"},{"size":630,"mtime":1651830909230,"results":"60","hashOfConfig":"34"},{"size":916,"mtime":1651830909196,"results":"61","hashOfConfig":"34"},{"size":770,"mtime":1651830909161,"results":"62","hashOfConfig":"34"},{"size":1816,"mtime":1651830909801,"results":"63","hashOfConfig":"34"},{"size":484,"mtime":1651830910026,"results":"64","hashOfConfig":"34"},{"size":6692,"mtime":1654165867014,"results":"65","hashOfConfig":"34"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},"1q1h3fz",{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"68"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"68"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"68"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"68"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"68"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"68"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"68"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"120","usedDeprecatedRules":"68"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"68"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"68"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\brijesh\\accelerator_project-final_dev\\FrontEnd\\src\\index.tsx",[],["141","142"],"C:\\brijesh\\accelerator_project-final_dev\\FrontEnd\\src\\app\\stores\\store.ts",[],"C:\\brijesh\\accelerator_project-final_dev\\FrontEnd\\src\\app\\layout\\App.tsx",["143"],"import React, { useEffect } from 'react';\nimport { Container } from 'semantic-ui-react';\nimport NavBar from './NavBar';\nimport { observer } from 'mobx-react-lite';\nimport { Route, Switch, useLocation } from 'react-router-dom';\nimport HomePage from '../../features/home/HomePage';\nimport { ToastContainer } from 'react-toastify';\nimport NotFound from '../../features/errors/NotFound';\nimport ModalContainer from '../common/modals/ModalContainer';\nimport EmpDashboard from '../../features/employees/dashboard/EmpDashboard';\nimport EmployeeDragAndDrop from '../../features/employees/dashboard/EmployeeDragAndDrop';\nimport EmpDetails from '../../features/employees/details/EmpDetails';\nimport EmpForm from '../../features/employees/form/EmpForm';\nimport EmpDelete from '../../features/employees/details/EmpDelete';\nimport LoadingComponent from './LoadingComponent';\nimport { useStore } from '../stores/store';\nimport LoginForm from '../../features/users/LoginForm';\nimport EmployeeDragDrop from '../../features/employees/dashboard/EmployeeDragDrop';\n\nfunction App() {\n  const location = useLocation();\n  const {commonStore, userStore} = useStore();\n\n  useEffect(() => {\n    if (commonStore.token) {\n      userStore.getUser().finally(() => commonStore.setAppLoaded());\n    } else {\n      commonStore.setAppLoaded();\n    }\n  }, [commonStore, userStore])\n\n  if (!commonStore.appLoaded) return <LoadingComponent content='Loading app...' />\n \n  return (\n    <>\n      <ToastContainer position='bottom-right' hideProgressBar />\n      <ModalContainer />\n      <Route exact path='/' component={HomePage} />\n      <Route\n        path={'/(.+)'}\n        render={() => (\n          <>\n            <NavBar />\n            <Container style={{ marginTop: '7em' }}>\n              <Switch>\n                <Route path=\"/employee/dragndrop\" component={EmployeeDragDrop} />\n                <Route exact path='/employee' component={EmpDashboard} />\n                <Route path='/employee/:id' component={EmpDetails} />\n                <Route key={location.key} path={['/createEmployee', '/manage/:id']} component={EmpForm} />\n                <Route path='/empdel/:id' component={EmpDelete} />\n                <Route path='/login' component={LoginForm} />\n\n                <Route component={NotFound} />\n              </Switch>\n            </Container>\n          </>\n        )}\n      />\n    </>\n  );\n}\n\nexport default observer(App);\n","C:\\brijesh\\accelerator_project-final_dev\\FrontEnd\\src\\app\\stores\\modalStore.ts",[],"C:\\brijesh\\accelerator_project-final_dev\\FrontEnd\\src\\app\\stores\\userStore.ts",[],"C:\\brijesh\\accelerator_project-final_dev\\FrontEnd\\src\\app\\stores\\commonStore.ts",[],"C:\\brijesh\\accelerator_project-final_dev\\FrontEnd\\src\\app\\stores\\employeeStore.ts",["144"],"import { makeAutoObservable, runInAction, toJS } from \"mobx\";\nimport agent from \"../api/agent\";\nimport { Employee } from \"../models/employee\";\nimport { toast } from \"react-toastify\";\nimport { create_employee,delete_employee, get_all_Employees, get_employee, update_employee } from \"../common/query/query\";\n\nexport default class EmployeeStore {\n    employeeRegistry = new Map<number, Employee>();\n    selectedEmployee: Employee |undefined =undefined;\n    editMode = false;\n    loading = false;\n    loadingInitial = false;\n    constructor() {\n        makeAutoObservable(this)\n    }\n\n    // sort employee list by DOJ\n    get employeesByDate() {\n        return Array.from(this.employeeRegistry.values())\n       .sort((a, b) =>\n       a.empDOJ!.getDate()-b.empDOJ!.getDate()\n       )\n    }\n\n    // grouping employee according to DOJ\n    get groupedEmployee() {\n        return Object.entries(\n            this.employeesByDate.reduce((employees,employee) => {\n                const date = this.convertDate(employee.empDOJ);\n                employees[date] = employees[date] ? [...employees[date], employee] : [employee];\n                return employees;\n            }, {} as {[key: string]: Employee[]})\n        )\n    }\n\n    // to call api for all employees & store them in registry\n    loadEmployees = async () => {\n        const get_all_Employees_Query = {\"query\":  get_all_Employees };\n        this.loadingInitial = true;\n        try {\n            const employees = await agent.API.data(get_all_Employees_Query);\n            employees.data.data.allEmployees.forEach((employee: Employee) => {\n                this.setEmployee(employee);\n            })\n            this.setLoadingInitial(false);\n        } catch (error) {\n             console.log(error);\n             this.setLoadingInitial(false);\n        }\n    }\n\n        // to call api to get single employee by its ID\n    loademployee = async (id: number) => {\n       let employee = this.getEmloyee(id);\n        if (employee) {\n            this.selectedEmployee = employee;\n            return employee;\n        } else {\n            this.loadingInitial = true;\n            const  get_Employee_Query={\n                \"query\": get_employee,\n                      \"variables\":{\n                          \"empID\": id\n                        }\n                };\n            try {\n             const employee= await agent.API.data(get_Employee_Query);\n              this.setEmployee(employee.data.data.employees[0]);\n                runInAction(() => {\n                    this.selectedEmployee=employee.data.data.employees[0];\n                })\n               this.setLoadingInitial(false);\n               return employee.data.data.employees[0];\n            } catch (error) {\n                console.log(error);\n                this.setLoadingInitial(false);\n            }\n       }\n    }\n\n    // to set employee in registry\n    private setEmployee = (employee: Employee) => {\n        employee.empDOJ = new Date(employee.empDOJ!);\n        this.employeeRegistry.set(employee.empID, employee);\n    }\n\n    // to get employee from registry by its ID\n    private getEmloyee = (id: number) => {\n    return this.employeeRegistry.get(id)\n    }\n\n    setLoadingInitial = (state: boolean) => {\n        this.loadingInitial = state;\n    }\n\n    // convert data into format {yyyy-mm-dd}\n    private convertDate(str:any) {           \n        var date = new Date(str),\n          mnth = (\"0\" + (date.getMonth() + 1)).slice(-2),\n          day = (\"0\" + date.getDate()).slice(-2);\n        return [date.getFullYear(), mnth, day].join(\"-\");\n      }\n\n     // to call create employee api \n    createEmployee = async (employee: Employee) => {\n      const  create_Employee_Query={\n        \"query\": create_employee,\n              \"variables\":{\n                  \"empName\": employee.empName,\n                  \"empCity\": employee.empCity,\n                  \"empOfficeVenue\": employee.empOfficeVenue,\n                   \"empDOJ\": this.convertDate(employee.empDOJ),\n                  \"empDescription\": employee.empDescription,                \n                  \"empCategory\": employee.empCategory             \n                }\n        };\n        this.loading = true;\n        try {\n          const emp= await agent.API.data(create_Employee_Query);\n            runInAction(() => {\n              this.employeeRegistry.set(emp.data.data.createEmployee.employee.empID, emp.data.data.createEmployee.employee);\n               this.selectedEmployee = emp.data.data.createEmployee.employee;\n                this.editMode = false;\n                this.loading = false;\n            })\n            toast.success(\"Employee Created !\")\n            return emp.data.data.createEmployee.employee.empID;\n        } catch (error) {\n            console.log(error);\n            runInAction(() => {\n                this.loading = false;\n            })\n        }\n    }\n\n     // to call update employee api \n    updateEmployee = async (employee: Employee) => {\n        const  update_Employee_Query={\n            \"query\":update_employee,\n              \"variables\":{\n                \"empID\": employee.empID,\n                \"empName\": employee.empName,\n                \"empCity\": employee.empCity,\n                \"empOfficeVenue\": employee.empOfficeVenue,\n                \"empDOJ\": this.convertDate(employee.empDOJ),\n                \"empDescription\": employee.empDescription,                \n                \"empCategory\": employee.empCategory             \n              }\n            };\n        this.loading = true;\n        try {\n           await agent.API.data(update_Employee_Query);\n\n            runInAction(() => {\n                this.employeeRegistry.set(employee.empID, employee);\n                this.selectedEmployee = employee;\n                this.editMode = false;\n                this.loading = false;\n            })\n        } catch (error) {\n            console.log(error);\n            runInAction(() => {\n                this.loading = false;\n            })\n        }\n    }\n\n         // to call delete employee api \n    deleteemployee = async (id: number) => {\n        this.loading = true;\n        const  delete_Employee_Query={\n            \"query\":delete_employee,\n                  \"variables\":{\n                      \"empID\": id\n                    }\n            };\n    \n        try {\n         await agent.API.data(delete_Employee_Query);\n            runInAction(() => {\n                this.employeeRegistry.delete(id);\n                this.loading = false;\n            })\n           toast.success(\"Employee Deleted !\")\n        } catch (error) {\n            console.log(error);\n            runInAction(() => {\n                this.loading = false;\n            })\n        }\n    }\n}","C:\\brijesh\\accelerator_project-final_dev\\FrontEnd\\src\\app\\layout\\NavBar.tsx",["145","146"],"import { observer } from \"mobx-react-lite\";\nimport React from \"react\";\nimport { Link, NavLink } from 'react-router-dom';\nimport { Button, Container, Menu, Image, Dropdown } from 'semantic-ui-react';\nimport { useStore } from \"../stores/store\";\n\nexport default observer(function NavBar() {\n  const { userStore: { user, logout } } = useStore();\n\n  return (\n    <Menu inverted fixed=\"top\">\n      <Container>\n        <Menu.Item as={NavLink} exact to=\"/\" header>\n          <img\n            src=\"/assets/logo.png\"\n            alt=\"logo\"\n            style={{ marginRight: \"10px\" }}\n          />\n          Employees\n        </Menu.Item>\n        <Menu.Item as={NavLink} to=\"/employee\" name=\"Employees\" />\n        <Menu.Item>\n          <Button\n            as={NavLink}\n            to=\"/createEmployee\"\n            positive\n            content=\"Create Employee\"\n          />\n        </Menu.Item>\n        <Menu.Item position='right'>\n          <Dropdown pointing='top left' text={user?.displayName}>\n            <Dropdown.Menu>\n               <Dropdown.Item onClick={logout} text='Logout' icon='power' />\n             </Dropdown.Menu>\n          </Dropdown>\n          </Menu.Item>\n      </Container>\n    </Menu>\n  );\n});\n","C:\\brijesh\\accelerator_project-final_dev\\FrontEnd\\src\\app\\layout\\LoadingComponent.tsx",[],"C:\\brijesh\\accelerator_project-final_dev\\FrontEnd\\src\\features\\errors\\NotFound.tsx",[],"C:\\brijesh\\accelerator_project-final_dev\\FrontEnd\\src\\features\\users\\LoginForm.tsx",[],"C:\\brijesh\\accelerator_project-final_dev\\FrontEnd\\src\\features\\employees\\dashboard\\EmpDashboard.tsx",[],"C:\\brijesh\\accelerator_project-final_dev\\FrontEnd\\src\\features\\home\\HomePage.tsx",[],"C:\\brijesh\\accelerator_project-final_dev\\FrontEnd\\src\\features\\employees\\dashboard\\EmployeeDragAndDrop.tsx",[],"C:\\brijesh\\accelerator_project-final_dev\\FrontEnd\\src\\features\\employees\\form\\EmpForm.tsx",["147"],"import { observer } from 'mobx-react-lite';\nimport React, { useEffect, useState } from 'react';\nimport { Link, useHistory, useParams } from 'react-router-dom';\nimport { Button, Header, Segment } from 'semantic-ui-react';\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\nimport { useStore } from '../../../app/stores/store';\nimport { Formik, Form } from 'formik';\nimport * as Yup from 'yup';\nimport MyTextInput from '../../../app/common/form/MyTextInput';\nimport MyTextArea from '../../../app/common/form/MyTextArea';\nimport MySelectInput from '../../../app/common/form/MySelectInput';\nimport { categoryOptions } from '../../../app/common/options/categoryOptions';\nimport MyDateInput from '../../../app/common/form/MyDateInput';\nimport { Employee } from '../../../app/models/employee';\nimport { toJS } from 'mobx';\nimport { toast } from 'react-toastify';\n\nexport default observer(function EmployeeForm() {\n    const history = useHistory();\n    const { empStore } = useStore();\n    const { createEmployee,updateEmployee,loading,loademployee,loadingInitial } = empStore;\n    const { id } = useParams<{ id: string }>();\n\n    const [employee, setEmployee] = useState<Employee>({\n        empID: 0,\n        empName: '',\n        empDOJ: null,\n        empDescription: '',\n        empCategory: '',\n        empCity: '',\n        empOfficeVenue: ''\n    });\n\n    const validationSchema = Yup.object({\n        empName: Yup.string().required('The Name is required'),\n        empDescription: Yup.string().required('The description is required'),\n        empCategory: Yup.string().required(),\n        empDOJ: Yup.string().required('Date is required').nullable(),\n        empOfficeVenue: Yup.string().required(),\n        empCity: Yup.string().required(),\n    })\n\n    useEffect(() => {\n        if (id) \n        loademployee(Number(id)).then((d)=>setEmployee(toJS(d)))\n    }, [id, loademployee]);\n\n    function handleFormSubmit(employee: Employee) {\n        if (employee.empID === 0) {\n            let newEmployee = {\n                ...employee \n            };\n            createEmployee(newEmployee).then((id) =>{\n                 history.push(`/employee/${id}`)\n            }\n               )\n        } else {\n            updateEmployee(employee).then(() => history.push(`/employee/${employee.empID}`))\n        }\n    }\n\n    if (loadingInitial) return <LoadingComponent content='Loading employee...' />\n\n    return (\n        <Segment clearing>\n            <Header content='Employee Details' sub color='teal' />\n            <Formik \n                validationSchema={validationSchema}\n                enableReinitialize \n                initialValues={employee} \n                onSubmit={values => handleFormSubmit(values)}>\n                {({ handleSubmit, isValid, isSubmitting, dirty }) => (\n                    <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\n                        <MyTextInput name='empName' placeholder='Employee Name' />\n                        <MyDateInput \n                            placeholderText='Date'  \n                            name='empDOJ' \n                            dateFormat='yyyy-MM-dd'\n                        />\n                        <MyTextArea rows={3} placeholder='Description' name='empDescription' />\n                        <MySelectInput options={categoryOptions} placeholder='Category'  name='empCategory' />\n                        <Header content='Location Details' sub color='teal' />\n                        <MyTextInput placeholder='City'  name='empCity' />\n                        <MyTextInput placeholder='Venue' name='empOfficeVenue' />\n                        <Button \n                            disabled={isSubmitting || !dirty || !isValid}\n                            loading={loading} floated='right' \n                            positive type='submit' content='Submit' />\n                        <Button as={Link} to='/employee' floated='right' type='button' content='Cancel' />\n                    </Form>\n                )}\n            </Formik>\n\n        </Segment>\n    )\n})","C:\\brijesh\\accelerator_project-final_dev\\FrontEnd\\src\\features\\employees\\details\\EmpDelete.tsx",["148","149"],"import { observer } from 'mobx-react-lite';\nimport { useEffect } from 'react';\nimport {  useHistory, useParams } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\nimport { useStore } from '../../../app/stores/store';\n\n\nexport default observer(function EmployeeDetails() {\n    const history = useHistory();\n    const {empStore} = useStore();\n    const {deleteemployee,employeeRegistry} = empStore;\n    const {id} = useParams<{id: string}>();\n\n    useEffect(() => {\n        (async () => {\n        if (id)\n        {\n           await deleteemployee(Number(id));\n        } \n        else{\n            toast.error(\"No Item Selected\")\n         }\n         window.location.href = \"/employee\"\n        })()       \n    }, [id, deleteemployee]);\n\n    return (\n        <>\n        <LoadingComponent content='Deleting Employee...' />     \n       </>\n    )\n})\n\n\n","C:\\brijesh\\accelerator_project-final_dev\\FrontEnd\\src\\app\\common\\modals\\ModalContainer.tsx",[],"C:\\brijesh\\accelerator_project-final_dev\\FrontEnd\\src\\features\\employees\\details\\EmpDetails.tsx",["150","151"],"import { toJS } from 'mobx';\nimport { observer } from 'mobx-react-lite';\nimport React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Grid } from 'semantic-ui-react';\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\nimport { Employee } from '../../../app/models/employee';\nimport { useStore } from '../../../app/stores/store';\nimport EmpDetailedHeader from './EmpDetailedHeader';\nimport EmpDetailedInfo from './EmpDetailedInfo';\n\nexport default observer(function EmployeeDetails() {\n    const {empStore} = useStore();\n    const {selectedEmployee:employee,loademployee,loadingInitial} = empStore;\n    const {id} = useParams<{id: string}>();\n \n    useEffect(() => {\n        if (id)\n           loademployee(Number(id))\n    }, [id, loademployee]);\n\n    if (loadingInitial || !employee) return <LoadingComponent />;\n    return (\n        <Grid>\n            <Grid.Column width={10}>\n               <EmpDetailedHeader employee={toJS(employee)} /> \n                 <EmpDetailedInfo employee={toJS(employee)} /> \n            </Grid.Column>\n            <Grid.Column width={6}>\n            </Grid.Column>\n        </Grid>\n    )\n})","C:\\brijesh\\accelerator_project-final_dev\\FrontEnd\\src\\app\\api\\agent.ts",["152","153"],"import axios, { AxiosError } from 'axios';\nimport { toast } from 'react-toastify';\nimport { history } from '../..';\nimport { store } from '../stores/store';\nimport { refresh_Token } from '../common/query/query';\nimport UserStore from '../stores/userStore';\n\nconst sleep = (delay: number) => {\n    return new Promise((resolve) => {\n        setTimeout(resolve, delay)\n    })\n}\n// GraphQL single Entry Point URL \naxios.defaults.baseURL = 'http://localhost:8000/userlist/';\naxios.defaults.method='get';\n\n// Adding bearer token to header of every request\n// axios.interceptors.request.use(config => {\n//     const token = store.commonStore.token;\n//     if (token) config.headers.Authorization = `Bearer ${token}`\n//     return config;\n// })\n\naxios.interceptors.response.use(async response => {\nlet token = localStorage.getItem('jwt');\nlet reftoken = localStorage.getItem('jwt2');\n\nif(token && reftoken )\n{\n    store.userStore.updateToken(token);\n}\n    await sleep(1000);\n    return response;\n}, (error: AxiosError) => {\n    const {data, status, config} = error.response! || {};\n    switch (status) {\n        case 400:\n            if (config.method === 'get' && data.errors.hasOwnProperty('id')) {\n                history.push('/not-found');\n            }\n            if (data.errors) {\n                const modalStateErrors = [];\n                for (const key in data.errors) {\n                    if (data.errors[key]) {\n                        modalStateErrors.push(data.errors[key])\n                    }\n                }\n                throw modalStateErrors.flat();\n            } else {\n                toast.error(data);\n            }\n            break;\n        case 401:\n            toast.error('unauthorised');\n            break;\n        case 404:\n            history.push('/not-found');\n            break;\n        case 500:\n            store.commonStore.setServerError(data);\n            history.push('/server-error');\n            break;\n    }\n    return Promise.reject(error);\n})\n\nconst API = {\n   data:(query:any) => axios({\n     data:query\n   }),\n}\n\nconst agent = {\n    API\n}\n\nexport default agent;","C:\\brijesh\\accelerator_project-final_dev\\FrontEnd\\src\\app\\common\\query\\query.ts",[],"C:\\brijesh\\accelerator_project-final_dev\\FrontEnd\\src\\app\\common\\options\\categoryOptions.ts",[],"C:\\brijesh\\accelerator_project-final_dev\\FrontEnd\\src\\features\\employees\\dashboard\\EmpList.tsx",[],"C:\\brijesh\\accelerator_project-final_dev\\FrontEnd\\src\\features\\users\\RegisterForm.tsx",["154"],"import { ErrorMessage, Form, Formik } from 'formik';\nimport { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Button, Header } from 'semantic-ui-react';\nimport MyTextInput from '../../app/common/form/MyTextInput';\nimport { useStore } from '../../app/stores/store';\nimport * as Yup from 'yup';\nimport ValidationErrors from '../errors/ValidationErrors';\n\nexport default observer(function RegisterForm() {\n    const {userStore} = useStore();\n    return (\n        <Formik\n            initialValues={{displayName: '', username: '', email: '', password: '', error: null}}\n            onSubmit={(values, {setErrors}) => userStore.register(values).catch(error => \n                setErrors({error}))}\n            validationSchema={Yup.object({\n                displayName: Yup.string().required(),\n                username: Yup.string().required()\n                .min(3, \"Username must be at least 3 characters\")\n                .max(20, \"Username must not exceed 20 characters\")            \n                .matches(/^[aA-zZ\\s]+$/, \"Only alphabets are allowed\"),\n                email: Yup.string().required().email(\"Email is invalid\"),\n                password: Yup.string().required() .matches(\n                    /^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/,\n                    \"Must Contain 8 Characters, One Uppercase, One Lowercase, One Number and one special case Character\"\n                  ),\n            })}\n        >\n            {({handleSubmit, isSubmitting, errors, isValid, dirty}) => (\n                <Form className='ui form error' onSubmit={handleSubmit} autoComplete='off'>\n                    <Header as='h2' content='Sign up' color='teal' textAlign='center' />\n                    <MyTextInput name='displayName' placeholder='Display Name' />\n                    <MyTextInput name='username' placeholder='Username' />\n                    <MyTextInput name='email' placeholder='Email' />\n                    <MyTextInput name='password' placeholder='Password' type='password' />\n                    <ErrorMessage \n                        name='error' render={() => \n                        <ValidationErrors errors={errors.error}/>}\n                    />\n                    <Button disabled={!isValid || !dirty || isSubmitting} \n                        loading={isSubmitting} positive content='Register' type='submit' fluid />\n                </Form>\n            )}\n        </Formik>\n    )\n})","C:\\brijesh\\accelerator_project-final_dev\\FrontEnd\\src\\features\\employees\\details\\EmpDetailedInfo.tsx",["155"],"import { observer } from 'mobx-react-lite';\nimport { Segment, Grid, Icon } from 'semantic-ui-react'\nimport { Employee } from \"../../../app/models/employee\";\nimport {format} from 'date-fns';\n\ninterface Props {\n    employee: Employee\n}\n\nexport default observer(function EmployeeDetailedInfo({ employee }: Props) {\n   function convertDate(str:any) {\n        var date = new Date(str),\n          mnth = (\"0\" + (date.getMonth() + 1)).slice(-2),\n          day = (\"0\" + date.getDate()).slice(-2);\n        return [date.getFullYear(), mnth, day].join(\"-\");\n      }\n  employee.empDOJ=new Date(convertDate(employee.empDOJ))\n    return (\n        <Segment.Group>\n            <Segment attached='top'>\n                <Grid>\n                    <Grid.Column width={1}>\n                        <Icon size='large' color='teal' name='info' />\n                    </Grid.Column>\n                    <Grid.Column width={15}>\n                        <p>{employee.empDescription}</p>\n                    </Grid.Column>\n                </Grid>\n            </Segment>\n            <Segment attached>\n                <Grid verticalAlign='middle'>\n                    <Grid.Column width={1}>\n                        <Icon name='calendar' size='large' color='teal' />\n                    </Grid.Column>\n                    <Grid.Column width={15}>\n                        <span>\n                            {convertDate(employee.empDOJ)}\n                        </span>\n                    </Grid.Column>\n                </Grid>\n            </Segment>\n            <Segment attached>\n                <Grid verticalAlign='middle'>\n                    <Grid.Column width={1}>\n                        <Icon name='marker' size='large' color='teal' />\n                    </Grid.Column>\n                    <Grid.Column width={11}>\n                        <span>{employee.empOfficeVenue}, {employee.empCity}</span>\n                    </Grid.Column>\n                </Grid>\n            </Segment>\n        </Segment.Group>\n    )\n})","C:\\brijesh\\accelerator_project-final_dev\\FrontEnd\\src\\features\\employees\\details\\EmpDetailedHeader.tsx",["156"],"import { observer } from 'mobx-react-lite';\nimport React from 'react'\nimport { Link } from 'react-router-dom';\nimport {Button, Header, Item, Segment, Image} from 'semantic-ui-react'\nimport {Employee} from \"../../../app/models/employee\";\nimport {format} from 'date-fns';\nimport { toJS } from 'mobx';\n\nconst employeeImageStyle = {\n    filter: 'brightness(50%)'\n};\n\nconst employeeImageTextStyle = {\n    position: 'absolute',\n    bottom: '5%',\n    left: '5%',\n    width: '100%',\n    height: 'auto',\n    color: 'white'\n};\n\ninterface Props {\n    employee: Employee\n}\n\nexport default observer (function EmployeeDetailedHeader({employee}: Props) {\n    function convertDate(str:any) {\n        var date = new Date(str),\n          mnth = (\"0\" + (date.getMonth() + 1)).slice(-2),\n          day = (\"0\" + date.getDate()).slice(-2);\n        return [date.getFullYear(), mnth, day].join(\"-\");\n      }\n    return (\n        <Segment.Group>\n            <Segment basic attached='top' style={{padding: '0'}}>\n                <Image src={`/assets/categoryImages/${employee.empCategory}.jpg`} fluid style={employeeImageStyle}/>\n                <Segment style={employeeImageTextStyle} basic>\n                    <Item.Group>\n                        <Item>\n                            <Item.Content>\n                                <Header\n                                    size='huge'\n                                    content={toJS(employee.empName)}\n                                    style={{color: 'white'}}\n                                />\n                              <p>  {convertDate(employee.empDOJ)}</p>\n                            </Item.Content>\n                        </Item>\n                    </Item.Group>\n                </Segment>\n            </Segment>\n            <Segment clearing attached='bottom'>\n                <Button as={Link} to={`/manage/${employee.empID}`} color='orange' floated='right'>\n                    Manage\n                </Button>\n            </Segment>\n        </Segment.Group>\n    )\n})","C:\\brijesh\\accelerator_project-final_dev\\FrontEnd\\src\\app\\common\\form\\MyTextInput.tsx",[],"C:\\brijesh\\accelerator_project-final_dev\\FrontEnd\\src\\app\\common\\form\\MyTextArea.tsx",[],"C:\\brijesh\\accelerator_project-final_dev\\FrontEnd\\src\\app\\common\\form\\MySelectInput.tsx",[],"C:\\brijesh\\accelerator_project-final_dev\\FrontEnd\\src\\app\\common\\form\\MyDateInput.tsx",[],"C:\\brijesh\\accelerator_project-final_dev\\FrontEnd\\src\\features\\employees\\dashboard\\EmpListItem.tsx",[],"C:\\brijesh\\accelerator_project-final_dev\\FrontEnd\\src\\features\\errors\\ValidationErrors.tsx",[],"C:\\brijesh\\accelerator_project-final_dev\\FrontEnd\\src\\features\\employees\\dashboard\\EmployeeDragDrop.tsx",["157"],{"ruleId":"158","replacedBy":"159"},{"ruleId":"160","replacedBy":"161"},{"ruleId":"162","severity":1,"message":"163","line":11,"column":8,"nodeType":"164","messageId":"165","endLine":11,"endColumn":27},{"ruleId":"162","severity":1,"message":"166","line":1,"column":43,"nodeType":"164","messageId":"165","endLine":1,"endColumn":47},{"ruleId":"162","severity":1,"message":"167","line":3,"column":10,"nodeType":"164","messageId":"165","endLine":3,"endColumn":14},{"ruleId":"162","severity":1,"message":"168","line":4,"column":35,"nodeType":"164","messageId":"165","endLine":4,"endColumn":40},{"ruleId":"162","severity":1,"message":"169","line":16,"column":10,"nodeType":"164","messageId":"165","endLine":16,"endColumn":15},{"ruleId":"162","severity":1,"message":"170","line":10,"column":11,"nodeType":"164","messageId":"165","endLine":10,"endColumn":18},{"ruleId":"162","severity":1,"message":"171","line":12,"column":27,"nodeType":"164","messageId":"165","endLine":12,"endColumn":43},{"ruleId":"162","severity":1,"message":"172","line":3,"column":28,"nodeType":"164","messageId":"165","endLine":3,"endColumn":36},{"ruleId":"162","severity":1,"message":"173","line":7,"column":10,"nodeType":"164","messageId":"165","endLine":7,"endColumn":18},{"ruleId":"162","severity":1,"message":"174","line":5,"column":10,"nodeType":"164","messageId":"165","endLine":5,"endColumn":23},{"ruleId":"162","severity":1,"message":"175","line":6,"column":8,"nodeType":"164","messageId":"165","endLine":6,"endColumn":17},{"ruleId":"176","severity":1,"message":"177","line":24,"column":27,"nodeType":"178","messageId":"179","endLine":24,"endColumn":59,"fix":"180"},{"ruleId":"162","severity":1,"message":"181","line":4,"column":9,"nodeType":"164","messageId":"165","endLine":4,"endColumn":15},{"ruleId":"162","severity":1,"message":"181","line":6,"column":9,"nodeType":"164","messageId":"165","endLine":6,"endColumn":15},{"ruleId":"162","severity":1,"message":"182","line":75,"column":20,"nodeType":"164","messageId":"165","endLine":75,"endColumn":31},"no-native-reassign",["183"],"no-negated-in-lhs",["184"],"@typescript-eslint/no-unused-vars","'EmployeeDragAndDrop' is defined but never used.","Identifier","unusedVar","'toJS' is defined but never used.","'Link' is defined but never used.","'Image' is defined but never used.","'toast' is defined but never used.","'history' is assigned a value but never used.","'employeeRegistry' is assigned a value but never used.","'useState' is defined but never used.","'Employee' is defined but never used.","'refresh_Token' is defined but never used.","'UserStore' is defined but never used.","no-whitespace-before-property","Unexpected whitespace before property matches.","MemberExpression","unexpectedWhitespace",{"range":"185","text":"186"},"'format' is defined but never used.","'setUserList' is assigned a value but never used.","no-global-assign","no-unsafe-negation",[1203,1205],"."]